// Generated by CoffeeScript 1.3.3
(function() {
  var exec, fs, heroku, makeArgumentString, makeCommandArguments, makeCommandOptions, parseURL, utils;

  exec = require('child_process').exec;

  parseURL = require('url').parse;

  heroku = require('heroku');

  fs = require('fs');

  module.exports = utils = {};

  utils.parseConnectionString = function(connectionString) {
    var info, parsedURL, _ref;
    parsedURL = parseURL(connectionString);
    info = {};
    info.hostname = parsedURL.hostname;
    info.port = parsedURL.port;
    info.host = info.port ? "" + info.hostname + ":" + info.port : info.hostname;
    info.database = info.db = parsedURL.pathname && parsedURL.pathname.replace(/\//g, '');
    if (parsedURL.auth) {
      _ref = parsedURL.auth.split(':'), info.username = _ref[0], info.password = _ref[1];
    }
    return info;
  };

  utils.dumpDatabase = function(connectionString, dirName, next) {
    var argumentString, commandArguments, commandOptions, connectionParameters;
    connectionParameters = utils.parseConnectionString(connectionString);
    commandOptions = makeCommandOptions(connectionParameters);
    commandOptions.out = dirName;
    commandArguments = makeCommandArguments(commandOptions);
    console.log(argumentString = makeArgumentString(commandArguments));
    return exec("mongodump" + argumentString, function(err, stdOut, stdErr) {
      if (err) {
        return next(err);
      }
      return next(null, stdOut, stdErr);
    });
  };

  utils.restoreDatabase = function(connectionString, dirName, next) {
    return utils.findDumpDirName(dirName, function(err, actualDirName) {
      var argumentString, commandArguments, commandOptions, connectionParameters;
      console.log("Using " + actualDirName);
      connectionParameters = utils.parseConnectionString(connectionString);
      commandOptions = makeCommandOptions(connectionParameters);
      commandOptions.drop = true;
      commandArguments = makeCommandArguments(commandOptions, actualDirName);
      console.log(argumentString = makeArgumentString(commandArguments));
      return exec("mongorestore" + argumentString, function(err, stdOut, stdErr) {
        if (err) {
          return next(err);
        }
        return next(null, stdOut, stdErr);
      });
    });
  };

  utils.findDumpDirName = function(dirName, next) {
    var dirCount, entryName, lastDirName, _i, _len, _ref;
    dirCount = 0;
    _ref = fs.readdirSync(dirName);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      entryName = _ref[_i];
      if (fs.statSync("" + dirName + "/" + entryName).isDirectory()) {
        dirCount += 1;
        lastDirName = entryName;
      }
    }
    switch (dirCount) {
      case 0:
        return next(null, dirName);
      case 1:
        return next(null, dirName + "/" + lastDirName);
      default:
        return next("Dump dir contains multiple directories.");
    }
  };

  utils.dumpHerokuMongoHQDatabase = function(appName, dirName, next) {
    return utils.findHerokuMongoHQURL(appName, function(err, url) {
      if (err) {
        return next(err);
      }
      return utils.dumpDatabase(url, dirName, next);
    });
  };

  utils.restoreHerokuMongoHQDatabase = function(appName, dirName, next) {
    return utils.findHerokuMongoHQURL(appName, function(err, url) {
      if (err) {
        return next(err);
      }
      return utils.restoreDatabase(url, dirName, next);
    });
  };

  utils.findHerokuMongoHQURL = function(appName, next) {
    var herokuClient;
    if (!process.env['HEROKU_API_KEY']) {
      return next("Cannot find environment variable HEROKU_API_KEY");
    }
    herokuClient = new heroku.Heroku({
      key: process.env['HEROKU_API_KEY']
    });
    return herokuClient.get_config_vars(appName, function(err, herokuConfig) {
      if (err) {
        return next(err);
      }
      if (!herokuConfig.MONGOHQ_URL) {
        return next("Cannot find MONGOHQ_URL in config of " + appName + ".");
      }
      return next(null, herokuConfig.MONGOHQ_URL);
    });
  };

  makeCommandOptions = function(connParams) {
    var options;
    options = {};
    options.db = connParams.db;
    if (connParams.host !== "localhost") {
      options.host = connParams.host;
    }
    if (connParams.username) {
      options.username = connParams.username;
    }
    if (connParams.password) {
      options.password = connParams.password;
    }
    return options;
  };

  makeCommandArguments = function(options, object) {
    var args, name, value;
    args = [];
    for (name in options) {
      value = options[name];
      if (value !== false) {
        args.push("--" + name);
      }
      if (!(value === true || value === false)) {
        args.push("" + value);
      }
    }
    if (object) {
      args.push(object);
    }
    return args;
  };

  makeArgumentString = function(args) {
    var arg, str, _i, _len;
    str = "";
    for (_i = 0, _len = args.length; _i < _len; _i++) {
      arg = args[_i];
      str += " \"" + arg + "\"";
    }
    return str;
  };

}).call(this);
